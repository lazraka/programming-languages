%------------------------Performance Comparison------------------------
Comparing the performance of running kenken and plain_kenken, it is clear that plain_kenken runs much slower than kenken. On any
puzzle greater than 4x4 that was tested including the spec test case, plain_kenken does not find a solution within 10 minutes whereas
kenken is able to generate a solution in less than 1 second. When testing on a 4x4 puzzle, as the results show below for real time, kenken finds a 
solution in less than 1 ms whereas plain_kenken generates a solution 76 milliseconds. Similarly for the testcase provided in the assignment spec, 
kenken requires less than 1 ms to generate the first solution compared to 43 milliseconds for plain_kenken.

statistics, kenken(4,[+(6, [[1|1], [1|2], [2|1]]),*(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),-(1, [3|1], [3|2]),
   -(1, [4|1], [4|2]),+(8, [[3|3], [4|3], [4|4]]),*(2, [[3|4]])], T),statistics.
Memory               limit         in use            free

   trail  stack      16383 Kb            0 Kb        16383 Kb
   cstr   stack      16384 Kb            0 Kb        16384 Kb
   global stack      32767 Kb            3 Kb        32764 Kb
   local  stack      16383 Kb            0 Kb        16383 Kb
   atom   table      32768 atoms      1823 atoms     30945 atoms

Times              since start      since last

   user   time     287.132 sec      74.446 sec
   system time       0.343 sec       0.031 sec
   cpu    time     287.475 sec      74.477 sec
   real   time    5118.860 sec     533.567 sec
Memory               limit         in use            free

   trail  stack      16383 Kb            4 Kb        16379 Kb
   cstr   stack      16383 Kb            9 Kb        16374 Kb
   global stack      32767 Kb            4 Kb        32763 Kb
   local  stack      16383 Kb            1 Kb        16382 Kb
   atom   table      32768 atoms      1823 atoms     30945 atoms

Times              since start      since last

   user   time     287.132 sec       0.000 sec
   system time       0.343 sec       0.000 sec
   cpu    time     287.475 sec       0.000 sec
   real   time    5118.860 sec       0.000 sec

statistics, plain_kenken(4,[+(6, [[1|1], [1|2], [2|1]]),*(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),-(1, [3|1], [3|2]),
   -(1, [4|1], [4|2]),+(8, [[3|3], [4|3], [4|4]]),*(2, [[3|4]])], T),statistics.
Memory               limit         in use            free

   trail  stack      16383 Kb            0 Kb        16383 Kb
   cstr   stack      16384 Kb            0 Kb        16384 Kb
   global stack      32767 Kb            3 Kb        32764 Kb
   local  stack      16383 Kb            0 Kb        16383 Kb
   atom   table      32768 atoms      1824 atoms     30944 atoms

Times              since start      since last

   user   time     287.135 sec       0.003 sec
   system time       0.345 sec       0.002 sec
   cpu    time     287.480 sec       0.005 sec
   real   time    5189.518 sec      70.658 sec
Memory               limit         in use            free

   trail  stack      16383 Kb            0 Kb        16383 Kb
   cstr   stack      16384 Kb            0 Kb        16384 Kb
   global stack      32767 Kb            4 Kb        32763 Kb
   local  stack      16383 Kb            4 Kb        16379 Kb
   atom   table      32768 atoms      1824 atoms     30944 atoms

Times              since start      since last

   user   time     287.175 sec       0.040 sec
   system time       0.345 sec       0.000 sec
   cpu    time     287.520 sec       0.040 sec
   real   time    5189.594 sec       0.076 sec

%------------------------No op KenKen------------------------
No-op Kenken is similar to KenKen except that the operations must now be deduced instead of provided.
For No-op KenKen, many of the functions utilized in KenKen can be reused, and the strategy to solve the problem
will be very similar: first constraining the size of each row and column, then populating the rows with unique values 
ranging from 1 to N, ensuring the columns also contain unique values by transposing the board and finally satisfying
the constraints which now require finding the proper operations.

A sample call to No-op KenKen is the following:

 noop_kenken(5,
   [(10, [1|1], [1|2]),
   (10, [[1|3], [1|4], [1|5], [1|6]]),
   (10, [[2|1], [3|1], [3|2]),
   (10, [[2|2], [2|3], [2|4]]),
   (10, [[3|3], [3|4], [3|5]]),
   (10, [[4|1], [4|2], [5|1]]),
   (10, [[4|1], [5|2], [5|3], [5|4]]),
   (10, [[4|4], [4|5], [5|5]])],
   T_grid, T_ops).

In this implementation, the first argument to noop_kenken is N as in KenKen, the
second argument is similar to C in KenKen except without the operations at the start
of each list element, T_grid is the equivalent of T in KenKen and T_ops is the same
as the C in KenKen, that is with the deduced operation for each constraint.

In order to determine the operation for each constraint, a simple approach is to 
try each operator on each constraint and exhaustively force the deduction. Since only
four operators are used in noop_kenken, this method will necessarily finish the puzzle,
either finding a solution or failing. If a solution is found and the constraints are
successfully met, the arguments T_grid and T_ops will be populated. Otherwise, gprolog
will return no. The disadvantage of this method is its performance. Due to having to try
each operator on each constraint, the number of checks the function will have to perform
is 4^|C| wher |C| is the number of constraints provided. One solution though is to add
another check to limit the search space of prolog where if only 2 members of the list
are provided (as in the first constraint of the example call given), then we can attempt
to satisfy the constraint with division or subtraction as they can only take 2 element lists.
This is one such method that could improve performance, and other such constraints could
be added if performance were still not adequate.